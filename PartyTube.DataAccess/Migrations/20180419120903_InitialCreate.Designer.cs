// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PartyTube.DataAccess;
using System;

namespace PartyTube.DataAccess.Migrations
{
    [DbContext(typeof(PartyTubeDbContext))]
    [Migration("20180419120903_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("PartyTube.Model.Db.CurrentPlaylistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<int>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("CurrentPlaylist");
                });

            modelBuilder.Entity("PartyTube.Model.Db.HistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("PlayedDateTime");

                    b.Property<int>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("PartyTube.Model.Db.NowPlaying", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPlaying");

                    b.Property<int?>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("NowPlaying");
                });

            modelBuilder.Entity("PartyTube.Model.Db.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PlaylistName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PlaylistName")
                        .IsUnique();

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("PartyTube.Model.Db.PlaylistVideoItem", b =>
                {
                    b.Property<int>("PlaylistId");

                    b.Property<int>("VideoItemId");

                    b.HasKey("PlaylistId", "VideoItemId");

                    b.ToTable("PlaylistVideoItem");
                });

            modelBuilder.Entity("PartyTube.Model.Db.VideoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DurationInSeconds");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("VideoIdentifier")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("VideoIdentifier")
                        .IsUnique();

                    b.ToTable("Video");
                });

            modelBuilder.Entity("PartyTube.Model.Db.CurrentPlaylistItem", b =>
                {
                    b.HasOne("PartyTube.Model.Db.VideoItem", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyTube.Model.Db.HistoryItem", b =>
                {
                    b.HasOne("PartyTube.Model.Db.VideoItem", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyTube.Model.Db.NowPlaying", b =>
                {
                    b.HasOne("PartyTube.Model.Db.VideoItem", "Video")
                        .WithOne()
                        .HasForeignKey("PartyTube.Model.Db.NowPlaying", "VideoId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("PartyTube.Model.Db.PlaylistVideoItem", b =>
                {
                    b.HasOne("PartyTube.Model.Db.Playlist", "Playlist")
                        .WithMany("PlaylistVideoItems")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyTube.Model.Db.VideoItem", "VideoItem")
                        .WithMany("PlaylistVideoItems")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
